local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Survive The Incoming Bluududs Script By ScliptarOFC",
    LoadingTitle = "Loading UI...",
    LoadingSubtitle = "By ScliptarOFC",
    Icon = 4483362458,
    Theme = "Default",
    ToggleUIKeybind = "K",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Bluududiscomingforyouuilol"
    },
    Discord = {
        Enabled = false,
        Invite = "ididntevenmakeadiscordserverxd",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "Access Key Required",
        Subtitle = "Get your key in my Discord [NO I DIDN'T MAKE ONE [dc server] IT'S IN THE ORIGINAL VIDEO AT PINNED COMMENT]",
        Note = "if you're promoting this script or isn't scliptarofc please put a link to the original video so people can get the key.",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"scliptarofcsucks", "scliptarofcisprogamer"}
    }
})

local PlayerTab = Window:CreateTab("Player", "user")
local GameTab = Window:CreateTab("Game", 6026568199)

local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local humanoid
local walkSpeedValue = 16
local jumpPowerValue = 50
local infJumpEnabled = false
local noclipEnabled = false
local loopBringEnabled = false

local function updateHumanoid(character)
    humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = walkSpeedValue
    humanoid.JumpPower = jumpPowerValue

    humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if humanoid.WalkSpeed ~= walkSpeedValue then
            humanoid.WalkSpeed = walkSpeedValue
        end
    end)

    humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
        if humanoid.JumpPower ~= jumpPowerValue then
            humanoid.JumpPower = jumpPowerValue
        end
    end)
end

if player.Character then
    updateHumanoid(player.Character)
end

player.CharacterAdded:Connect(updateHumanoid)

spawn(function()
    while true do
        if humanoid then
            if humanoid.WalkSpeed ~= walkSpeedValue then
                humanoid.WalkSpeed = walkSpeedValue
            end
            if humanoid.JumpPower ~= jumpPowerValue then
                humanoid.JumpPower = jumpPowerValue
            end
        end
        task.wait(0.03)
    end
end)

PlayerTab:CreateSection("Player Movement")

PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 250},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = walkSpeedValue,
    Flag = "WalkSpeedSlider",
    Callback = function(val)
        walkSpeedValue = val
        if humanoid then
            humanoid.WalkSpeed = val
        end
    end
})

PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 250},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = jumpPowerValue,
    Flag = "JumpPowerSlider",
    Callback = function(val)
        jumpPowerValue = val
        if humanoid then
            humanoid.JumpPower = val
        end
    end
})

PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfJumpToggle",
    Callback = function(val)
        infJumpEnabled = val
    end
})

UserInputService.JumpRequest:Connect(function()
    if infJumpEnabled and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(val)
        noclipEnabled = val
    end
})

spawn(function()
    while true do
        if noclipEnabled and player.Character then
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        elseif player.Character then
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        task.wait(0.1)
    end
end)

GameTab:CreateSection("Game Controls")

GameTab:CreateToggle({
    Name = "Loop Bring Win Part to you [WIP]",
    CurrentValue = false,
    Flag = "LoopBringWinPartToggle",
    Callback = function(val)
        loopBringEnabled = val
    end
})

GameTab:CreateButton({
    Name = "Get Knife Gear",
    Callback = function()
        local knifeTool = ReplicatedStorage:FindFirstChild("Knife")
        if knifeTool and knifeTool:IsA("Tool") then
            knifeTool:Clone().Parent = player.Backpack
        end
    end
})

GameTab:CreateButton({
    Name = "Grab All Gears (ReplicatedFirst + ReplicatedStorage)",
    Callback = function()
        local function cloneToolsFrom(container)
            for _, item in pairs(container:GetDescendants()) do
                if item:IsA("Tool") then
                    item:Clone().Parent = player.Backpack
                end
            end
        end
        cloneToolsFrom(game:GetService("ReplicatedFirst"))
        cloneToolsFrom(ReplicatedStorage)
    end
})

GameTab:CreateButton({
    Name = "Delete Jeeps",
    Callback = function()
        local folder = workspace:FindFirstChild("VisualJeeps")
        if folder then
            folder:Destroy()
        end
    end
})

local lastBadgeCFrame
RunService.RenderStepped:Connect(function()
    if loopBringEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local badgegiver = workspace:FindFirstChild("badgegiver")
        if badgegiver and badgegiver:IsA("BasePart") then
            badgegiver.CanCollide = false
            local targetCFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0)
            if not lastBadgeCFrame or (lastBadgeCFrame.Position - targetCFrame.Position).Magnitude > 0.1 then
                badgegiver.CFrame = targetCFrame
                lastBadgeCFrame = targetCFrame
            end
        end
    end
end)

Rayfield:SetVisibility(true)
